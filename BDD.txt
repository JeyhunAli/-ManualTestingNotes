BDD -- > behavior driven development notes
 In this approach everybody in the same page first of all 
Cucumber is just a framework or its a tool to apply when we have BDD 

TDD   ----   BDD  -------  ATDD

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What is TDD BDD and ATDD?
tdd bdd atdd
Definition. TDD is a development technique that focuses more on the implementation of a feature. 
BDD is a development technique that focuses on the system's behavior. ATDD is a technique similar 
to BDD focusing more on capturing the requirements. Participants.

Test-Driven Development (TDD) is a form of testing that has a specific flow. First, a test is written. 
Then, the tests are run to prove that the test fails - this is called "red". Code is written such that 
the test passes - this is called "green". Finally, the code is refactored and the test suite is run and
 is kept "green" since the tests continue to pass. The process repeats. In TDD, the tests are typically 
written at a unit level, testing individual methods or functions or classes. TDD works to drive the design 
of the code with respect to its interfaces.

Acceptance Test-Driven Development (ATDD) is an extension to TDD. The tests that are written are written at
 an acceptance test level. Rather than encoding tests at the level of methods or functions or classes, they 
are written to define system behaviors. ATDD tests tend to help capture requirements and ensure that the 
system has the intended behavior.

Neither TDD nor ATDD require a particular format for tests. However, Behavior-driven development focuses on 
encoding the intended behavior using domain language. BDD tools take advantage of tools that allow tests to 
be written in a language that includes domain-specific terms, resulting in tests that are readable to both 
technical and non-technical stakeholders.

So, TDD and ATDD are levels of testing. TDD focuses on lower levels - unit and perhaps integration tests. 
ATDD focuses on system tests. Either of these can be combined with BDD to express tests to be more widely
 accessible to the variety of stakeholders involved in system development.



TDD   is always writing test cases first most of the time they are fail then making them work perfectly 
fine then refactoring it making it very suitable and trustworthy and solid code then production this cycle 
is all around in the add approach u have to keep enhancing and keep repeating this cycle entirely project to make it Solid 
ITS MORE FOCUSED ON unit level test cases 

BDD   is extension of the TDD HERE another concept is feature file scenarios and written test steps in gherkin language given when then 
Asking right questions why when how is the key concept to be more collaborative in these both approach 
The cycle same 
writing test cases first most of the time they are fail then making them work perfectly fine then refactoring it making it very suitable and trustworthy and solid code then production this cycle is all around in the add approach u have to keep enhancing and keep repeating this cycle entirely project to make it Solid 

ATDD    acceptance test driven development 
This is high level approach on top of the BDD  main guys PO business analyst 
Inside THE ATDD  business or PO deciding what approach to use either is BDD or TDD 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




Parameters	TDD	BDD	ATDD
Definition	
TDD is a development technique that focuses more on the implementation of a  feature	
BDD is a development technique that focuses on the systemâ€™s behavior	
ATDD is a technique similar to BDD focusing more on capturing the requirements
Participants	Developer	Developers, Customer, QAs	Developers, Customers, QAs
Language used	Written in a language similar to the one used for feature development (Eg. Java, Python, etc)	Simple English, (Gherkin) 	Simple English, Gherkin 
Main Focus	Unit Tests	Understanding Requirements	Writing Acceptance Tests
Tools used	JDave, Cucumber, JBehave, Spec Flow, BeanSpec, Gherkin Concordian, FitNesse	Gherkin, Dave, Cucumber, JBehave, Spec Flow, BeanSpec, Concordian	TestNG, FitNesse, EasyB, Spectacular, Concordian, Thucydides 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


1 feature file creation in one feature file we can have multiple scenarios and scenario outlines extension for feature file is  .feature 
Given when and then these are feature file keywords 

2 step definition class it. Can be any P language step definition class will have certain methods and that methods can have so separate utilities class and they can call 
Those methods for example excel utils or java methods utils 

3 test runner class we will have inside runner class Cucumber options junit runner feature file path step definition class path report 
Either pretty format 
For example 

package testRunner;

import org.junit.runner.RunWith;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;

@RunWith(Cucumber.class)
@CucumberOptions(
		
		
		features = "src/test/resources/Feature/GoogleSearch.feature",
		glue = {"stepdefinition", "myHooks"},          // where exactly your stepdefinition package
		tags = "@smoke",
		plugin = {"pretty",
				     "json: target/MyReports/report.json",
				"junit: target/MyReports/report.xml"
		},
		publish = false,       // this will generate report link on the console
		dryRun = false,         // this will check all the steps in feature file
		monochrome = false,      // this for better allignment in console 
		strict = true  //this already deprecated in cucumber 6.9 purpose of this is used to be 
		               // if any steps missing from feature file by doing strinct = false we can skip it 
		               //but now we can use only for strict = true 
		
		
		
		
		)

public class googlesearch {

}


Runner class first interaction with feature file based on the tags we provided 
https://cucumber.github.io/cucumber-eclipse/update-site/ 
Downloading plugin from this site to eclipse
Adding some dependencies into pom.xml file first properties for example java version cucumber version 
Then dependencies cucumber java cucumber Junit 
Then plugins 
Compiler  plugins surefire plugins 
When executing feature file right click run configuration then choose respective one then execute it 

For step definition different package then all the relative classes 

















2) feature file creation 
Gherkin language DSL domain specific language 
How to achieve test driven developments in add 
So we write feature file scenario executing that writing our code its failing then we are improving code making it trustworthy executing again 


3) mapping between step definition and feature file the moment you do some changes in your feature file immediately it will be reflected to the step definition as well as feature file 
According to the maven build structure feature file file should be part of your src/test/resources
Source folder 

https://cucumber.github.io/cucumber-eclipse/update-site/
This url for eclipse plugin download 
https://github.com/cucumber/cucumber-eclipse-update-site-snapshot
https://marketplace.eclipse.org/content/cucumber-eclipse-plugin
https://github.com/cucumber/cucumber-java-skeleton/blob/main/pom.xml
This url will help you to make sure u have updated version of cucumber plugin scroll down find work with --->> url 
Copy. That url and go to the eclipse then check it

Creating src/test/resources folder all the feature files available here
To map feature file with step definition under src/test/java creating step definition file all the mapped codes available here
Running feature file getting all the snippets code below then copy paste into step definition class

After implementing snippets code to the step def go back to the feature file make sure green color each and every steps are marked 
In feature file press command or ctrl in windows and hover on steps you will see all the steps are lined up u can click and it jump on that method in step definition class 

4)cucumber supports 2 kind expression 
Cucumber expression
Regular expression
Two types of Reg Expressions in Cucumber:

1. Regular Expression: [0-9]+, (\\d+)
2. Cucumber Expression (introduced in 2017) 

Rules:
1. Step def file will be generating cucumber expression only by default
2. But you can use regular expression also in step def file 
3. You can mix both regular and cucumber expression in step definition file
4. But you can not mix both expressions in the same step definition method


5)Tagging concept in Cucumber 
Tag can be applied feature and scenario level not on given when then 
If feature has tag it will apply to all the scenarios 
If scenario has a tag its separate from other scenarios 
What tags mentioned in the runner class that scenario will be execute 
We can pass two tags in the same scenario
For example 

@smoke @regression   
In the runner class we have to write 
tags = "@smoke and regression". Then it will pick that scenario which is written with these tags
But lets say if we don't have this combination In the feature file and they are separately written from each other's  for example 
@smoke 
Scenario:

@regression
Scenario:

In this case if we write in runner class 
Tags = "@smoke and regression " it will pick zero scenarios and nothing will execute 
 
  
We can give two tags for example smoke and sanity to single scenario 
In the runner class any 2tags with and separator if we apply and if there are no any scenario like that zero feature file will execute 
Lets say u want to execute all the scenarios except one 
U don't need to mention all of them in the runner class 
Just write 
tags = "not @your tags name"
Along with these u can write @All  on top of the Feature. For example 
"@All"
Feature:

 in the runner class it will execute all the test cases 
Here all the scenarios are inheriting @All. 
From command line u can also run your test cases ---->>> mvn test 
It will execute as you apply in the runner class 
But lets say u have given @All tags or any other for example @smoke or @sanity @regression in the runner class 
Whenever u run your test cases from cmd you can mention here also like
 
mvn test -Dcucumber.filter.tags="@smoke"  -->> this cmd belongs to cucumber version 6
 this cmd will pick and execute only smoke test case it doesn't matter if you write sanity or @All in your runner class 
This class overriding tags in terminal

In maven it will show u that u mentioned @All along with @smoke and whatever tags u run 
mvn test -Dcucumber.options.tags="All" this cmd belongs to cucumber version 4 

@smoke @QA-ready @user-story-9090 @Epic-10 we can provide in our feature file this format as well here we are given our user story number epic number along with 
@smoke test tags 
This tags is helping for documentation point of view and later on we can relate it with any test management tool like jira and quality center QC 



6)Background keyword in cucumber 
This keyword is used to define pre condition for all the scenarios 
Instead of repeating the same Given steps in all of the scenarios in a Feature file 
We can move such Given steps to the background, by grouping them under a Background keyword.
It can contain one or more Given steps, which are run before each scenario, but after any Before hooks.



7)Hooks In Add Cucumber 
It will help to do precondition and how to define post steps 
Hooks are never part of the feature file it can be part of the step def or 
Can be written separate configuration class 
This concept helps a lot how define pre condition and pre steps 
SetUp and TearDown just like in testNG 

Its preferred to have separate package with class for hooks 
So in that class we can define any scenario with the @tag inside parentheses 
How to  execute very simple 
In our runner class 
In glue section we are defining our hook package name
Hooks with the tagging annotations concept are amazing 
What tags mentioned in hook class those scenarios will work with hook concept 

 


We can have multiple @before hook  before each method 

@Before  ---->>>> will be execute before each scenario 
method1(order = 1) 
@Before 
Method2 (order = 2) --- these are pre condition 


@After  ------->>> will be execute after each scenario 
Same thing we can do for after method too
For example close browser, disconnect database 

@BeforeStep ------->>>> before each step of the scenarios 
@AfterStep  ------->>>> after each step of the scenarios  

We can have multiple @Before @after Hooks 


For detail notes and info check add framework demo in GitHub 






Hot to click with submit click action java script 
Javascript best click it can even click hidden elements 
With the html tag hidden or disable 
Get text and get attribute both can use find out the text written on the elements

































